/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  StakingRewards,
  StakingRewardsInterface,
} from "../../contracts/StakingRewards";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_rewardsToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_stakingToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "earned",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "exit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getReward",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "lastTimeRewardApplicable",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastUpdateTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "reward",
        type: "uint256",
      },
    ],
    name: "notifyRewardAmount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "periodFinish",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardPerToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardPerTokenStored",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "rewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardsDuration",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardsToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "stakingToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "userRewardPerTokenPaid",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c0604052600060015560006002556301e133806003553480156200002357600080fd5b5060405162001b3638038062001b3683398181016040528101906200004991906200020f565b620000696200005d620000d960201b60201c565b620000e160201b60201c565b8173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050505062000256565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001d782620001aa565b9050919050565b620001e981620001ca565b8114620001f557600080fd5b50565b6000815190506200020981620001de565b92915050565b60008060408385031215620002295762000228620001a5565b5b60006200023985828601620001f8565b92505060206200024c85828601620001f8565b9150509250929050565b60805160a05161189e62000298600039600081816108a901528181610b3c0152610f8c01526000818161069a01528181610c4c0152610e67015261189e6000f3fe608060405234801561001057600080fd5b50600436106101415760003560e01c806380faa57d116100b8578063cd3daf9d1161007c578063cd3daf9d14610340578063d1af0c7d1461035e578063df136d651461037c578063e9fad8ee1461039a578063ebe2b12b146103a4578063f2fde38b146103c257610141565b806380faa57d1461029a5780638b876347146102b85780638da5cb5b146102e8578063a694fc3a14610306578063c8f33c911461032257610141565b80633c6b16ab1161010a5780633c6b16ab146101fe5780633d18b9121461021a57806370a0823114610224578063715018a61461025457806372f702f31461025e5780637b0a47ee1461027c57610141565b80628cc262146101465780630700037d1461017657806318160ddd146101a65780632e1a7d4d146101c4578063386a9525146101e0575b600080fd5b610160600480360381019061015b919061123d565b6103de565b60405161016d9190611283565b60405180910390f35b610190600480360381019061018b919061123d565b6104e0565b60405161019d9190611283565b60405180910390f35b6101ae6104f8565b6040516101bb9190611283565b60405180910390f35b6101de60048036038101906101d991906112ca565b610502565b005b6101e861074a565b6040516101f59190611283565b60405180910390f35b610218600480360381019061021391906112ca565b610750565b005b6102226109c4565b005b61023e6004803603810190610239919061123d565b610bed565b60405161024b9190611283565b60405180910390f35b61025c610c36565b005b610266610c4a565b6040516102739190611356565b60405180910390f35b610284610c6e565b6040516102919190611283565b60405180910390f35b6102a2610c74565b6040516102af9190611283565b60405180910390f35b6102d260048036038101906102cd919061123d565b610c8e565b6040516102df9190611283565b60405180910390f35b6102f0610ca6565b6040516102fd9190611380565b60405180910390f35b610320600480360381019061031b91906112ca565b610ccf565b005b61032a610f19565b6040516103379190611283565b60405180910390f35b610348610f1f565b6040516103559190611283565b60405180910390f35b610366610f8a565b6040516103739190611356565b60405180910390f35b610384610fae565b6040516103919190611283565b60405180910390f35b6103a2610fb4565b005b6103ac611006565b6040516103b99190611283565b60405180910390f35b6103dc60048036038101906103d7919061123d565b61100c565b005b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054670de0b6b3a7640000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610471610f1f565b61047b91906113ca565b600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546104c591906113fe565b6104cf9190611487565b6104d991906114b8565b9050919050565b60076020528060005260406000206000915090505481565b6000600854905090565b3361050b610f1f565b600581905550610519610c74565b600481905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146105e65761055c816103de565b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600554600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b60008211610629576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106209061156b565b60405180910390fd5b816008600082825461063b91906113ca565b9250508190555081600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461069191906113ca565b925050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b81526004016106f392919061158b565b602060405180830381600087803b15801561070d57600080fd5b505af1158015610721573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074591906115ec565b505050565b60035481565b610758611090565b6000610762610f1f565b600581905550610770610c74565b600481905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461083d576107b3816103de565b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600554600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b600154421061085f57600354826108549190611487565b6002819055506108a5565b60004260015461086f91906113ca565b905060006002548261088191906113fe565b9050600354816108919190611487565b8461089c91906114b8565b60028190555050505b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016109009190611380565b60206040518083038186803b15801561091857600080fd5b505afa15801561092c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610950919061162e565b9050600354816109609190611487565b60025411156109a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099b906116a7565b60405180910390fd5b42600481905550600354426109b991906114b8565b600181905550505050565b336109cd610f1f565b6005819055506109db610c74565b600481905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610aa857610a1e816103de565b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600554600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811115610be9576000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610b9592919061158b565b602060405180830381600087803b158015610baf57600080fd5b505af1158015610bc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be791906115ec565b505b5050565b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610c3e611090565b610c48600061110e565b565b7f000000000000000000000000000000000000000000000000000000000000000081565b60025481565b60006001544210610c8757600154610c89565b425b905090565b60066020528060005260406000206000915090505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b33610cd8610f1f565b600581905550610ce6610c74565b600481905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610db357610d29816103de565b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600554600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b60008211610df6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ded90611713565b60405180910390fd5b8160086000828254610e0891906114b8565b9250508190555081600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610e5e91906114b8565b925050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401610ec293929190611733565b602060405180830381600087803b158015610edc57600080fd5b505af1158015610ef0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1491906115ec565b505050565b60045481565b6000806008541415610f35576005549050610f87565b600854670de0b6b3a7640000600454610f4c610c74565b610f5691906113ca565b600254610f6391906113fe565b610f6d91906113fe565b610f779190611487565b600554610f8491906114b8565b90505b90565b7f000000000000000000000000000000000000000000000000000000000000000081565b60055481565b610ffc600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610502565b6110046109c4565b565b60015481565b611014611090565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611084576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107b906117dc565b60405180910390fd5b61108d8161110e565b50565b6110986111d2565b73ffffffffffffffffffffffffffffffffffffffff166110b6610ca6565b73ffffffffffffffffffffffffffffffffffffffff161461110c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110390611848565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061120a826111df565b9050919050565b61121a816111ff565b811461122557600080fd5b50565b60008135905061123781611211565b92915050565b600060208284031215611253576112526111da565b5b600061126184828501611228565b91505092915050565b6000819050919050565b61127d8161126a565b82525050565b60006020820190506112986000830184611274565b92915050565b6112a78161126a565b81146112b257600080fd5b50565b6000813590506112c48161129e565b92915050565b6000602082840312156112e0576112df6111da565b5b60006112ee848285016112b5565b91505092915050565b6000819050919050565b600061131c611317611312846111df565b6112f7565b6111df565b9050919050565b600061132e82611301565b9050919050565b600061134082611323565b9050919050565b61135081611335565b82525050565b600060208201905061136b6000830184611347565b92915050565b61137a816111ff565b82525050565b60006020820190506113956000830184611371565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006113d58261126a565b91506113e08361126a565b9250828210156113f3576113f261139b565b5b828203905092915050565b60006114098261126a565b91506114148361126a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561144d5761144c61139b565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006114928261126a565b915061149d8361126a565b9250826114ad576114ac611458565b5b828204905092915050565b60006114c38261126a565b91506114ce8361126a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156115035761150261139b565b5b828201905092915050565b600082825260208201905092915050565b7f43616e6e6f742077697468647261772030000000000000000000000000000000600082015250565b600061155560118361150e565b91506115608261151f565b602082019050919050565b6000602082019050818103600083015261158481611548565b9050919050565b60006040820190506115a06000830185611371565b6115ad6020830184611274565b9392505050565b60008115159050919050565b6115c9816115b4565b81146115d457600080fd5b50565b6000815190506115e6816115c0565b92915050565b600060208284031215611602576116016111da565b5b6000611610848285016115d7565b91505092915050565b6000815190506116288161129e565b92915050565b600060208284031215611644576116436111da565b5b600061165284828501611619565b91505092915050565b7f50726f76696465642072657761726420746f6f20686967680000000000000000600082015250565b600061169160188361150e565b915061169c8261165b565b602082019050919050565b600060208201905081810360008301526116c081611684565b9050919050565b7f43616e6e6f74207374616b652030000000000000000000000000000000000000600082015250565b60006116fd600e8361150e565b9150611708826116c7565b602082019050919050565b6000602082019050818103600083015261172c816116f0565b9050919050565b60006060820190506117486000830186611371565b6117556020830185611371565b6117626040830184611274565b949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006117c660268361150e565b91506117d18261176a565b604082019050919050565b600060208201905081810360008301526117f5816117b9565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061183260208361150e565b915061183d826117fc565b602082019050919050565b6000602082019050818103600083015261186181611825565b905091905056fea264697066735822122003546f33028cbca6e0ee9ccb6bf3b5cf7d2e7a32ceed6de60e99e6639d2e93d364736f6c63430008090033";

type StakingRewardsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakingRewardsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StakingRewards__factory extends ContractFactory {
  constructor(...args: StakingRewardsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _rewardsToken: PromiseOrValue<string>,
    _stakingToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<StakingRewards> {
    return super.deploy(
      _rewardsToken,
      _stakingToken,
      overrides || {}
    ) as Promise<StakingRewards>;
  }
  override getDeployTransaction(
    _rewardsToken: PromiseOrValue<string>,
    _stakingToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _rewardsToken,
      _stakingToken,
      overrides || {}
    );
  }
  override attach(address: string): StakingRewards {
    return super.attach(address) as StakingRewards;
  }
  override connect(signer: Signer): StakingRewards__factory {
    return super.connect(signer) as StakingRewards__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingRewardsInterface {
    return new utils.Interface(_abi) as StakingRewardsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StakingRewards {
    return new Contract(address, _abi, signerOrProvider) as StakingRewards;
  }
}
